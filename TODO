
Vector
✘ Investigate use of removing Clone bound for some operations @started(20-04-28 20:42) @cancelled(20-05-01 17:11) @wasted(2d20h29m4s)
  We can remove the Clone bounds on the Leaf but Internal is going to require work. We need to
  implement a new Rc type that understands whether or not it has ever been cloned. Uncloned Rc's
  would allow mutatio without requiring the Clone bound.
  ✘ Create own Rc type. @cancelled(20-05-02 15:57)
    This is pretty hard, we want to add clone only if necessary. Cloning should never be necessary
    for things aren't clone.

[] Implement extra functions on the vector @started(20-04-28 21:23)
 ✔ constant_of_length @started(20-04-28 21:24) @done(20-04-28 21:28) @lasted(4m6s)
 ✔ reverse @started(20-04-28 21:32) @done(20-04-28 21:40) @lasted(8m28s)
 ✔ iter_mut @started(20-04-29 00:21) @done(20-04-29 00:35) @lasted(14m16s)
 [] insert_in_range
   This is less useful for now as it requires set up for whether items have enough space for an item.
 ✔ equal_range @started(20-05-01 17:32) @done(20-05-02 15:57) @lasted(22h25m31s)
 ✘ permute @started(20-04-30 21:46) @cancelled(20-05-01 16:48) @wasted(19h2m52s)
 ✔ Better sort function names @started(20-05-01 16:48) @done(20-05-01 17:00) @lasted(12m5s)
 [] slice_extract vs slice_remove

✔ Implement extension traits for nodes OR have the user be able to define custom Internal/Leaf nodes and control their behaviour via traits @done(20-08-14 22:09)

[] Implement annotation methods for nodes
  Create a shadow Vector where the nodes have additional data for the aggregate of all the nodes
  beneath it.
  [] Annotated Vector with type parameters for A, F annotation functions.
    
  ✔ Annotation table with a type parameter for the value type of the aggregation. @done(20-05-04 18:53)
  [] Internal nodes that store the annotation table as well the regular SizeTable.
  [] Leaf nodes that can look up by annotation value.
  [] FocusMut problems? Need to update the annotation tables when the original Vector is updated
    We could make split accept two functions that get run on the left and right splits.
    We could focus_mut do the same thing for annotations.
    We could have split return a single wrapper struct that when dropped makes the necessary adjustments
  ✔ Redo FocusMut implementation to use closures and Fn to be able to apply RAII logic to Focus. @done(20-05-10 17:48)
    This is done but it complicates certain things a bit. This is probably a necessary change anyway though.

[] remove function improvements
  We can detect cases where concatenation of the left and right sides of the tree would not make any progress.

✔ Split_at improvements @done(20-08-14 22:55)

Focus
✘ Investigate ZipFocus concept which allows you use a tuple vectors and treat them as a vector of tuples. @cancelled(20-04-30 01:08)
  ✔ Look at itertools for zip implementation @started(20-04-29 12:01) @done(20-04-29 14:57) @lasted(2h56m38s)
    Looks complicated to do easily, rather let's make a trait for things that are trait like. This
    way we can abstract the sort method
  ✔ Trait for foci for sort @started(20-04-29 14:57) @done(20-04-30 19:31) @lasted(1d4h34m55s)
    This ends up not being entirely necessary. We can write a trait for the Fn comparison to use in
    the permute.
[] Write tests for concatenation and splits
[] Attempt to use Vector of BorrowNode's for storage
[] Investigate spine like structure for Focus. (leading to tracking two positions)
[] Abstract over Focus or Vector like type

Sort
[] Simplify sort functions into a singular function so we don't have too much duplicated code.

Documentation
[] Write documentation for methods with stubs

Errors
✔ thiserrorify everything @started(20-05-27 22:24) @done(20-05-27 22:49) @lasted(25m8s)
✔ Remove thiserror in favour of a single error enum because the errors are quite sparse. @done(20-08-14 22:08)